[{"categories":null,"content":"Introduction Effective audit trails surrounding sensitive groups is essential when it comes to maintaining secure active directory networks and in some cases required by regulatory compliance frameworks. For cloud and hybrid-AD joined networks there is twice as much work to be done. Leveraging automation to have detections and reporting in place for security professionals is considered best practice and is critical in terms of detecting privilege escalation attacks both on premise and in the cloud. Unfortunately the monitoring of user privileges is no longer enough as more on premise networks connect to the cloud, thus adding more complexity and increasing the threat landscape. ","date":"2022-10-16","objectID":"/detecting-privilege-escalation-via-azure-api-permission-abuse/:0:0","tags":null,"title":"Detecting Privilege Escalation via Azure API Permission Abuse","uri":"/detecting-privilege-escalation-via-azure-api-permission-abuse/"},{"categories":null,"content":"Detecting Azure API Permission Abuse Ensuring we grant the right permissions to enterprise applications and application registrations is equally important as doing the same with our users. In some cases, fundamental application management can mitigate more risk than we would expect considering powerful roles and attack paths surrounding APIs. Depending on the initial access of a threat actor, one could create a back door by creating a custom app registration and assigning one of many highly privileged roles available. This back door can go unnoticed without the proper detections in place. ","date":"2022-10-16","objectID":"/detecting-privilege-escalation-via-azure-api-permission-abuse/:1:0","tags":null,"title":"Detecting Privilege Escalation via Azure API Permission Abuse","uri":"/detecting-privilege-escalation-via-azure-api-permission-abuse/"},{"categories":null,"content":"Roles Thankfully there is a built-in alert with Microsoft Cloud App Security “Unusual addition of credentials to an OAuth app that can be used as an indicator of malicious activity. Use the below query to detect these dangerous permissions being added to an application: Application.ReadWrite.All AppRoleAssignment.ReadWrite.All RoleManagement.ReadWrite.Directory Information on what permissions are granted through these roles can be found here: https://learn.microsoft.com/en-us/graph/permissions-reference ","date":"2022-10-16","objectID":"/detecting-privilege-escalation-via-azure-api-permission-abuse/:1:1","tags":null,"title":"Detecting Privilege Escalation via Azure API Permission Abuse","uri":"/detecting-privilege-escalation-via-azure-api-permission-abuse/"},{"categories":null,"content":"KQL let DangerousPermissions = dynamic([\"AppRoleAssignment.ReadWrite.All\",\"Application.ReadWrite.All\",\"RoleManagement.ReadWrite.Directory\"]); AuditLogs | where OperationName == \"Add app role assignment to service principal\" | where Result =~ \"success\" | mv-expand TargetResources | mv-expand TargetResources.modifiedProperties | where TargetResources_modifiedProperties.displayName == \"AppRole.Value\" | extend InitiatingUserOrApp = tostring(InitiatedBy.user.userPrincipalName) | extend InitiatingIpAddress = tostring(InitiatedBy.user.ipAddress) | extend UserAgent = iff(AdditionalDetails[0].key == \"User-Agent\",tostring(AdditionalDetails[0].value),\"\") | extend AddedPermission = replace_string(tostring(TargetResources_modifiedProperties.newValue),'\"','') | where AddedPermission in~ ( DangerousPermissions ) | mv-expand TargetResources.modifiedProperties | where TargetResources_modifiedProperties.displayName == \"ServicePrincipal.ObjectID\" | extend ServicePrincipalObjectID = replace_string(tostring(TargetResources_modifiedProperties.newValue),'\"','') | extend timestamp = TimeGenerated, AccountCustomEntity = InitiatingUserOrApp, IPCustomEntity = InitiatingIpAddress ","date":"2022-10-16","objectID":"/detecting-privilege-escalation-via-azure-api-permission-abuse/:1:2","tags":null,"title":"Detecting Privilege Escalation via Azure API Permission Abuse","uri":"/detecting-privilege-escalation-via-azure-api-permission-abuse/"},{"categories":null,"content":"Introduction Note: This article assumes the reader has 100-level understanding of how to manage resources across tenants through the use of Azure Lighthouse. Azure Lighthouse is extremely useful delegating permissions and resources across large multi-tenant enterprise cloud environments or for Managed Service Providers to manage their customer environments. Unfortunately Azure Lighthouse can also create security risks if not monitored properly. Below we will discuss how to detect changes in permissions/authorizations across users, groups, or service principles in cross-tenant scenarios. More information on Azure Lighthouse here: https://azure.microsoft.com/en-us/products/azure-lighthouse/#overview ","date":"2022-10-15","objectID":"/detecting-azure-lighthouse-attacks/:0:0","tags":null,"title":"Detecting Azure Lighthouse Privilege Escalation Attacks","uri":"/detecting-azure-lighthouse-attacks/"},{"categories":null,"content":"Attack An attacker can craft an ARM template which can be used to delegate permissions inside the victim’s tenant. The threat actor can assign these delegated permissions at the subscription or resource group level and trick an administrator into deploying this template or do it themselves using a hijacked account. A separate is deployment is necessary for each different subscription so if an attacker was to delegate permissions to more than just one, multiple alerts would fire in this scenario. An attacker can also leverage Azure Policy to deploy with automation. Once lighthouse is deployed an attacker can access the victim’s target tenant resources from their own tenant. This is very dangerous considering the contributer role can be delegated using Azure Lighthouse. In order to see current delegations you must check which service offers are currently active in the Auzre Portal under “Service Providers.” ","date":"2022-10-15","objectID":"/detecting-azure-lighthouse-attacks/:1:0","tags":null,"title":"Detecting Azure Lighthouse Privilege Escalation Attacks","uri":"/detecting-azure-lighthouse-attacks/"},{"categories":null,"content":"Detection It is extremely important for us as an MDR provider to detect the latest attack paths both on premise and in the cloud. We dedicate ourselves to extensive research across the latest attack-paths which can be leveraged to take over cloud or hybrid-AD joined active directory networks. Below you’ll find the KQL query which can be leveraged to hunt for suspicious granting of resources via Microsoft.ManagedServices registrations as well as how to detect any operation done by a user from another tenant. Registration: AzureActivity\r| where OperationNameValue =~ \"Microsoft.ManagedServices/registrationAssignments/Write\"\r| extend timestamp = TimeGenerated, AccountCustomEntity = Caller, IPCustomEntity = CallerIpAddress Activity: let HomeTenantId = \"YOURTENANTID\";\rAzureActivity\r| extend TenantId = todynamic(Claims).['http://schemas.microsoft.com/identity/claims/tenantid']\r| where TenantId != HomeTenantId\r| where isnotempty( TenantId )\r| sort by TimeGenerated ","date":"2022-10-15","objectID":"/detecting-azure-lighthouse-attacks/:2:0","tags":null,"title":"Detecting Azure Lighthouse Privilege Escalation Attacks","uri":"/detecting-azure-lighthouse-attacks/"},{"categories":null,"content":"Introduction It can be stressful managing multiple workspaces in Microsoft Sentinel, especially when it comes to having to manually deploy analytic rules in large enterprise environments with multiple tenants. This feature is incredibly useful for Managed Security Service Providers who manage multiple workspaces. With Microsoft Sentinel Repositories, we can deploy and manage custom content from a central repository across multiple workspaces at ease. Originally this article was written in early 2022 when Microsoft Sentinel Repositories was released. This feature is still in public preview and can be referenced here: https://learn.microsoft.com/en-us/azure/sentinel/ci-cd?tabs=github Prerequisites Sentinel supports connections to GitHub and Azure DevOps repositories. According to Microsoft the following permissions are required to connect a Microsoft Sentinel workspace to your source control repository: Resource Group Owner or both the User Access Administrator and Sentinel Contributer roles Contributer access to the code repository in GitHub or Azure DevOps Actions enabled for GitHub and Pipeliens enabled for Azure Devops Pro tip: For the MSSPs and multi-tenant scenarios leveraging Azure Lighthouse, it’s recommended assigning these roles to a group in your ARM template prior to deploying Azure Lighthouse. The role definition ids can be found here: https://learn.microsoft.com/en-us/azure/role-based-access-control/built-in-roles ","date":"2022-09-27","objectID":"/deploy-custom-content-in-microsoft-sentinel-using-repositories/:0:0","tags":null,"title":"Deploy Custom Content In Microsoft Sentinel Using Repositories","uri":"/deploy-custom-content-in-microsoft-sentinel-using-repositories/"},{"categories":null,"content":"Additional Prerequisites Additionally, to deploy custom content it’s required to have Actions enabled for GitHub and Pipelines enabled for Azure DevOps. Although there is a plethora of .yml files in the Microsoft Sentinel Public GitHub Repository, custom content can only be deployed via Azure Resource Manager (ARM) templates. Pro tip: It is extremely useful to leverage a separate workspace as a model tenant to build, test, stage, and export custom content as ARM templates in Microsoft Sentinel. Deploying Content For the purpose of this demonstration we’ll be deploying Analytic Rules, but the following content types can be selected when creating a new connection in Repositories: Analytic Rules Automation Rules Hunting Queries Parsers Playbooks Workbooks ","date":"2022-09-27","objectID":"/deploy-custom-content-in-microsoft-sentinel-using-repositories/:1:0","tags":null,"title":"Deploy Custom Content In Microsoft Sentinel Using Repositories","uri":"/deploy-custom-content-in-microsoft-sentinel-using-repositories/"},{"categories":null,"content":"Creating Connections At the time of writing there were too many cross-tenant limitations which existed when connecting Azure DevOps so this demonstration was done using GitHub. If you decide to use Azure DevOps, please note that if you’re creating the connection as a guest user the AzureDevOps URL must be entered manually and will not appear in the dropdown. Be sure to be signed into either GitHub or Azure DevOps to connect a repository and in Microsoft Sentinel, under Content Management, select Repositories in the Sentinel workspace where you wish to deploy content. Make sure you’re signed into the account which has been assigned the proper permissions, select “Add new”, and Create a new connection. Name the connection and if necessary provide a description, next authorize your Source control application. Once you’ve authorized either GitHub or AzureDevOps select a repository, branch, and select the Content types and hit create. This connection will create a workflow rule in your source repository and begin to deploy or update any existing content specified in the rule. For the sake of this article, we’re going to add the rule after we connect the repository. ","date":"2022-09-27","objectID":"/deploy-custom-content-in-microsoft-sentinel-using-repositories/:2:0","tags":null,"title":"Deploy Custom Content In Microsoft Sentinel Using Repositories","uri":"/deploy-custom-content-in-microsoft-sentinel-using-repositories/"},{"categories":null,"content":"Example In the example below, we’ll deploy a really simple analytic rule in which detects for failed login activity in an Active Directory network. Since we can only deploy content through Azure Resource Manager (ARM) templates in the form of .json files, it is recommended to first create the rule in a separate workspace and export it. You can do this by selecting the analytic rule and selecting the export button at the top. Once you have the .json file ARM template, adding this rule to your source repository will immediately deploy to all of the connected workspaces. Note that any changes to existing content will overwrite, any content matching the parameters to deploy will deploy to all workspaces connected to the workflow. Pro tip: Making use of a naming convention to label your CICD content can be extremely helpful when managing content. When managing large rule sets with multiple workspaces, it’s recommended making the required updates and changes to rules from the central repository to maintain consistency across the connected workspaces. ","date":"2022-09-27","objectID":"/deploy-custom-content-in-microsoft-sentinel-using-repositories/:3:0","tags":null,"title":"Deploy Custom Content In Microsoft Sentinel Using Repositories","uri":"/deploy-custom-content-in-microsoft-sentinel-using-repositories/"}]