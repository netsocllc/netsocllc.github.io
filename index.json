[{"categories":null,"content":"Introduction The underlying technology surrounding cross tenant administration is incredibly fascinating. Managed Service Providers often leverage Azure Lighthouse or Foreign Principle Access to delegate permissions. While this feature allows for some luxurious integrations, they may not be aware they are introducing more risk to themselves and their customers. In this article we will discuss how to securely delegate, monitor, and harden privileged access. Note: This article applies to all organizations leveraging cross-tenant technology and is not specific to Managed Service Providers. This article entails a way to increase security cross-tenant delegation of permissions and resources. ","date":"2022-10-17","objectID":"/securing-and-monitoring-cross-tenant-privileged-access-and-administration/:1:0","tags":null,"title":"Secure and Monitor Cross-Tenant Privileged Access","uri":"/securing-and-monitoring-cross-tenant-privileged-access-and-administration/"},{"categories":null,"content":"Overview At the end of this article you will understand how to harden and remove permanent access delegations and replace it with a more secure temporary session based elevation of privilege to specific customer environments. ","date":"2022-10-17","objectID":"/securing-and-monitoring-cross-tenant-privileged-access-and-administration/:2:0","tags":null,"title":"Secure and Monitor Cross-Tenant Privileged Access","uri":"/securing-and-monitoring-cross-tenant-privileged-access-and-administration/"},{"categories":null,"content":"Removing Permanent Access This is done by leveraging Privileged Identity Management’s new feature which allows for the temporary session based elevation of group memberships. Often times Managed Service Providers leverage one group to delegate permissions into customer environments either via Foreign Principle Access or Azure Lighthouse. This access control model without being subject to periodic audits can create headaches for Managed Service Providers when trying to restrict or control the access of their employees into customer environments. Additionally, assigning a user to a group gives access the access required until the group membership is removed. With Azure AD Privileged Identity Management, the user can temporarily activate their group membership for up to 8 hours. It is also recommended the managing tenant create a separate group for each customer environment, role, or both. Assigning the group to a user via Privileged Access Groups will require the delegation of access to be controlled by Azure Active Directory Privileged Identity Management. To do this, create a group and enable it for “Privileged Access” under group settings and add the users who require access into customer environments. Following this implementation, those users who will require access will first need to activate their group membership in the Azure Management Portal under Privilged Identity Management. Note: It is never a bad idea to require MFA verifications ","date":"2022-10-17","objectID":"/securing-and-monitoring-cross-tenant-privileged-access-and-administration/:3:0","tags":null,"title":"Secure and Monitor Cross-Tenant Privileged Access","uri":"/securing-and-monitoring-cross-tenant-privileged-access-and-administration/"},{"categories":null,"content":"Tenant Access Delegation Hardening It is highly recommended that this is done for all subscriptions across managing and customer tenants. In Azure Policy, there is an available built-in definition called “Allow managing tenant ids to onboarding through Azure Lighthouse.” This built-in definition will restrict Azure Lighthouse delegations to specific managing tenants in a “deny-all” fashion to increase security by limiting those who can manage Azure Resources. With this policy, you are supposed to list the tenants who are allowed to be delegated as service providers, it is required you assign this policy at the subscription level. ","date":"2022-10-17","objectID":"/securing-and-monitoring-cross-tenant-privileged-access-and-administration/:4:0","tags":null,"title":"Secure and Monitor Cross-Tenant Privileged Access","uri":"/securing-and-monitoring-cross-tenant-privileged-access-and-administration/"},{"categories":null,"content":"Effective Auditing Surrounding Cross Tenant Administration In the diagram at the top of this article, you’ll notice that the Azure Activity logs are being sent to the same workspace. While this isn’t technically possible, there are very interesting deployment models surrounding the use of Azure Lighthouse and Microsoft Sentinel features allowing the managing tenant to query across multiple workspaces (more on this in another blog post). Regardless it is highly recommended that the following is monitored across all tenants and subscriptions which delegate access to managing or customer tenants: The use of MFA when a user from another tenant authenticates When a new user from the managing tenant becomes eligible for Privileged Access Group assignments When an eligible user activates the Privileged Access Group assignment When a user from the managing tenant makes changes in the customer tenant When resource delegations are assigned to any tenant other than the managing or customer tenant ","date":"2022-10-17","objectID":"/securing-and-monitoring-cross-tenant-privileged-access-and-administration/:5:0","tags":null,"title":"Secure and Monitor Cross-Tenant Privileged Access","uri":"/securing-and-monitoring-cross-tenant-privileged-access-and-administration/"},{"categories":null,"content":"KQL Queries Queries for these monitoring detections can be found in previous blog posts: https://blog.netsoc.us/detecting-high-privileged-role-assignments/ https://blog.netsoc.us/detecting-privilege-escalation-via-azure-api-permission-abuse/ https://blog.netsoc.us/detecting-azure-lighthouse-attacks/ ","date":"2022-10-17","objectID":"/securing-and-monitoring-cross-tenant-privileged-access-and-administration/:5:1","tags":null,"title":"Secure and Monitor Cross-Tenant Privileged Access","uri":"/securing-and-monitoring-cross-tenant-privileged-access-and-administration/"},{"categories":null,"content":"Introduction It’s no secret that information security teams should have detections in place to detect unusual changes in high privilege roles. Accidentally assigning the wrong Azure AD role can be catastrophic if a high privileged user or managed identity is to unknowingly fall victim to compromise. There are a number of roles which should be considered sensitive, these should be heavily monitored and periodically audited. Some examples of these roles include but are not limited to the following: Global Administrator Company Administrator Privileged Authentication Administrator Privileged Role Administrator Note: As if having to monitor and detect changes in permissions with our users wasn’t a complex task, organizations should equally monitor the permissions and roles across APIs more on this here: https://blog.netsoc.us/detecting-privilege-escalation-via-azure-api-permission-abuse/ ","date":"2022-10-16","objectID":"/detecting-high-privileged-role-assignments/:0:0","tags":null,"title":"Detecting Privilege Escalation via High Privileged Role Assignments","uri":"/detecting-high-privileged-role-assignments/"},{"categories":null,"content":"Requirements In order to detect changes to high privileged roles in Azure AD, it’s required the data connector “Azure Active Directory” be connected and Audit Logs be ingested into Azure Sentinel. Global Administrator or Security Administrator is required in order to make this connection, along with the proper permissions at the Workspace or Resource group level to make changes to the workspace. Additionally, read and write permissions to AAD diagnostic settings must be available. ","date":"2022-10-16","objectID":"/detecting-high-privileged-role-assignments/:1:0","tags":null,"title":"Detecting Privilege Escalation via High Privileged Role Assignments","uri":"/detecting-high-privileged-role-assignments/"},{"categories":null,"content":"KQL Query to detect changes across the aforementioned roles, feel free to add additional high privileged roles like Security Administrator, Exchange Administrator, or Application Administrator. let HighPrivRoles = dynamic([\"Global Administrator\",\"Company Administrator\",\"Privileged Authentication Administrator\",\"Privileged Role Administrator\"]); AuditLogs | where OperationName == \"Add member to role\" | mv-expand TargetResources | mv-expand TargetResources.modifiedProperties | where TargetResources_modifiedProperties.displayName == \"Role.DisplayName\" | extend AddedToRole = replace_string(tostring(TargetResources_modifiedProperties.newValue),'\"','') | where AddedToRole in~ (HighPrivRoles) | extend Actor = iff(isnotempty(InitiatedBy.user.userPrincipalName),InitiatedBy.user.userPrincipalName,InitiatedBy.app.servicePrincipalId) | extend TargetUsername = TargetResources.userPrincipalName Depending on your environment, it may be beneficial to monitor specific changes like password changes across these high privileged roles. Again, feel free to add additional roles or activity as necessary. let HighPrivRoles = dynamic([\"Global Administrator\", \"Company Administrator\", \"Privileged Authentication Administrator\", \"Privileged Role Administrator\"]); AuditLogs | where OperationName == \"Reset user password\" | mv-expand TargetResources | extend TargetUsername = tostring(TargetResources.userPrincipalName) | join kind=innerunique ( IdentityInfo | where TimeGenerated \u003e ago(14d) ) on $left.TargetUsername == $right.AccountUPN | mv-expand AssignedRoles | extend AssignedRoles = tostring(AssignedRoles) | where AssignedRoles in (HighPrivRoles) | summarize by TimeGenerated, TargetUsername, AssignedRoles, OperationName, AADUserId=AccountObjectId Pro tip: It may be a good idea to generate a weekly or bi-weekly report to audit and review these changes. ","date":"2022-10-16","objectID":"/detecting-high-privileged-role-assignments/:2:0","tags":null,"title":"Detecting Privilege Escalation via High Privileged Role Assignments","uri":"/detecting-high-privileged-role-assignments/"},{"categories":null,"content":"Introduction Effective audit trails surrounding sensitive groups is essential when it comes to maintaining secure active directory networks and in some cases required by regulatory compliance frameworks. For cloud and hybrid-AD joined networks there is twice as much work to be done. Leveraging automation to have detections and reporting in place for security professionals is considered best practice and is critical in terms of detecting privilege escalation attacks both on premise and in the cloud. Unfortunately the monitoring of user privileges is no longer enough as more on premise networks connect to the cloud, thus adding more complexity and increasing the threat landscape. ","date":"2022-10-16","objectID":"/detecting-privilege-escalation-via-azure-api-permission-abuse/:0:0","tags":null,"title":"Detecting Privilege Escalation via Azure API Permission Abuse","uri":"/detecting-privilege-escalation-via-azure-api-permission-abuse/"},{"categories":null,"content":"Detecting Azure API Permission Abuse Ensuring we grant the right permissions to enterprise applications and application registrations is equally important as doing the same with our users. In some cases, fundamental application management can mitigate more risk than we would expect considering powerful roles and attack paths surrounding APIs. Depending on the initial access of a threat actor, one could create a back door by creating a custom app registration and assigning one of many highly privileged roles available. This back door can go unnoticed without the proper detections in place. ","date":"2022-10-16","objectID":"/detecting-privilege-escalation-via-azure-api-permission-abuse/:1:0","tags":null,"title":"Detecting Privilege Escalation via Azure API Permission Abuse","uri":"/detecting-privilege-escalation-via-azure-api-permission-abuse/"},{"categories":null,"content":"Roles Thankfully there is a built-in alert with Microsoft Cloud App Security “Unusual addition of credentials to an OAuth app that can be used as an indicator of malicious activity. Use the below query to detect these dangerous permissions being added to an application: Application.ReadWrite.All AppRoleAssignment.ReadWrite.All RoleManagement.ReadWrite.Directory Information on what permissions are granted through these roles can be found here: https://learn.microsoft.com/en-us/graph/permissions-reference ","date":"2022-10-16","objectID":"/detecting-privilege-escalation-via-azure-api-permission-abuse/:1:1","tags":null,"title":"Detecting Privilege Escalation via Azure API Permission Abuse","uri":"/detecting-privilege-escalation-via-azure-api-permission-abuse/"},{"categories":null,"content":"KQL let DangerousPermissions = dynamic([\"AppRoleAssignment.ReadWrite.All\",\"Application.ReadWrite.All\",\"RoleManagement.ReadWrite.Directory\"]); AuditLogs | where OperationName == \"Add app role assignment to service principal\" | where Result =~ \"success\" | mv-expand TargetResources | mv-expand TargetResources.modifiedProperties | where TargetResources_modifiedProperties.displayName == \"AppRole.Value\" | extend InitiatingUserOrApp = tostring(InitiatedBy.user.userPrincipalName) | extend InitiatingIpAddress = tostring(InitiatedBy.user.ipAddress) | extend UserAgent = iff(AdditionalDetails[0].key == \"User-Agent\",tostring(AdditionalDetails[0].value),\"\") | extend AddedPermission = replace_string(tostring(TargetResources_modifiedProperties.newValue),'\"','') | where AddedPermission in~ ( DangerousPermissions ) | mv-expand TargetResources.modifiedProperties | where TargetResources_modifiedProperties.displayName == \"ServicePrincipal.ObjectID\" | extend ServicePrincipalObjectID = replace_string(tostring(TargetResources_modifiedProperties.newValue),'\"','') | extend timestamp = TimeGenerated, AccountCustomEntity = InitiatingUserOrApp, IPCustomEntity = InitiatingIpAddress ","date":"2022-10-16","objectID":"/detecting-privilege-escalation-via-azure-api-permission-abuse/:1:2","tags":null,"title":"Detecting Privilege Escalation via Azure API Permission Abuse","uri":"/detecting-privilege-escalation-via-azure-api-permission-abuse/"},{"categories":null,"content":"Introduction Note: This article assumes the reader has 100-level understanding of how to manage resources across tenants through the use of Azure Lighthouse. Azure Lighthouse is extremely useful delegating permissions and resources across large multi-tenant enterprise cloud environments or for Managed Service Providers to manage their customer environments. Unfortunately Azure Lighthouse can also create security risks if not monitored properly. Below we will discuss how to detect changes in permissions/authorizations across users, groups, or service principles in cross-tenant scenarios. More information on Azure Lighthouse here: https://azure.microsoft.com/en-us/products/azure-lighthouse/#overview ","date":"2022-10-15","objectID":"/detecting-azure-lighthouse-attacks/:0:0","tags":null,"title":"Detecting Azure Lighthouse Privilege Escalation Attacks","uri":"/detecting-azure-lighthouse-attacks/"},{"categories":null,"content":"Attack An attacker can craft an ARM template which can be used to delegate permissions inside the victim’s tenant. The threat actor can assign these delegated permissions at the subscription or resource group level and trick an administrator into deploying this template or do it themselves using a hijacked account. A separate is deployment is necessary for each different subscription so if an attacker was to delegate permissions to more than just one, multiple alerts would fire in this scenario. An attacker can also leverage Azure Policy to deploy with automation. Once lighthouse is deployed an attacker can access the victim’s target tenant resources from their own tenant. This is very dangerous considering the contributer role can be delegated using Azure Lighthouse. In order to see current delegations you must check which service offers are currently active in the Auzre Portal under “Service Providers.” ","date":"2022-10-15","objectID":"/detecting-azure-lighthouse-attacks/:1:0","tags":null,"title":"Detecting Azure Lighthouse Privilege Escalation Attacks","uri":"/detecting-azure-lighthouse-attacks/"},{"categories":null,"content":"Detection It is extremely important for us as an MDR provider to detect the latest attack paths both on premise and in the cloud. We dedicate ourselves to extensive research across the latest attack-paths which can be leveraged to take over cloud or hybrid-AD joined active directory networks. Below you’ll find the KQL query which can be leveraged to hunt for suspicious granting of resources via Microsoft.ManagedServices registrations as well as how to detect any operation done by a user from another tenant. Registration: AzureActivity\r| where OperationNameValue =~ \"Microsoft.ManagedServices/registrationAssignments/Write\"\r| extend timestamp = TimeGenerated, AccountCustomEntity = Caller, IPCustomEntity = CallerIpAddress Activity: let HomeTenantId = \"YOURTENANTID\";\rAzureActivity\r| extend TenantId = todynamic(Claims).['http://schemas.microsoft.com/identity/claims/tenantid']\r| where TenantId != HomeTenantId\r| where isnotempty( TenantId )\r| sort by TimeGenerated ","date":"2022-10-15","objectID":"/detecting-azure-lighthouse-attacks/:2:0","tags":null,"title":"Detecting Azure Lighthouse Privilege Escalation Attacks","uri":"/detecting-azure-lighthouse-attacks/"},{"categories":null,"content":"Introduction It can be stressful managing multiple workspaces in Microsoft Sentinel, especially when it comes to having to manually deploy analytic rules in large enterprise environments with multiple tenants. This feature is incredibly useful for Managed Security Service Providers who manage multiple workspaces. With Microsoft Sentinel Repositories, we can deploy and manage custom content from a central repository across multiple workspaces at ease. Originally this article was written in early 2022 when Microsoft Sentinel Repositories was released. This feature is still in public preview and can be referenced here: https://learn.microsoft.com/en-us/azure/sentinel/ci-cd?tabs=github Prerequisites Sentinel supports connections to GitHub and Azure DevOps repositories. According to Microsoft the following permissions are required to connect a Microsoft Sentinel workspace to your source control repository: Resource Group Owner or both the User Access Administrator and Sentinel Contributer roles Contributer access to the code repository in GitHub or Azure DevOps Actions enabled for GitHub and Pipeliens enabled for Azure Devops Pro tip: For the MSSPs and multi-tenant scenarios leveraging Azure Lighthouse, it’s recommended assigning these roles to a group in your ARM template prior to deploying Azure Lighthouse. The role definition ids can be found here: https://learn.microsoft.com/en-us/azure/role-based-access-control/built-in-roles ","date":"2022-09-27","objectID":"/deploy-custom-content-in-microsoft-sentinel-using-repositories/:0:0","tags":null,"title":"Deploy Custom Content In Microsoft Sentinel Using Repositories","uri":"/deploy-custom-content-in-microsoft-sentinel-using-repositories/"},{"categories":null,"content":"Additional Prerequisites Additionally, to deploy custom content it’s required to have Actions enabled for GitHub and Pipelines enabled for Azure DevOps. Although there is a plethora of .yml files in the Microsoft Sentinel Public GitHub Repository, custom content can only be deployed via Azure Resource Manager (ARM) templates. Pro tip: It is extremely useful to leverage a separate workspace as a model tenant to build, test, stage, and export custom content as ARM templates in Microsoft Sentinel. Deploying Content For the purpose of this demonstration we’ll be deploying Analytic Rules, but the following content types can be selected when creating a new connection in Repositories: Analytic Rules Automation Rules Hunting Queries Parsers Playbooks Workbooks ","date":"2022-09-27","objectID":"/deploy-custom-content-in-microsoft-sentinel-using-repositories/:1:0","tags":null,"title":"Deploy Custom Content In Microsoft Sentinel Using Repositories","uri":"/deploy-custom-content-in-microsoft-sentinel-using-repositories/"},{"categories":null,"content":"Creating Connections At the time of writing there were too many cross-tenant limitations which existed when connecting Azure DevOps so this demonstration was done using GitHub. If you decide to use Azure DevOps, please note that if you’re creating the connection as a guest user the AzureDevOps URL must be entered manually and will not appear in the dropdown. Be sure to be signed into either GitHub or Azure DevOps to connect a repository and in Microsoft Sentinel, under Content Management, select Repositories in the Sentinel workspace where you wish to deploy content. Make sure you’re signed into the account which has been assigned the proper permissions, select “Add new”, and Create a new connection. Name the connection and if necessary provide a description, next authorize your Source control application. Once you’ve authorized either GitHub or AzureDevOps select a repository, branch, and select the Content types and hit create. This connection will create a workflow rule in your source repository and begin to deploy or update any existing content specified in the rule. For the sake of this article, we’re going to add the rule after we connect the repository. ","date":"2022-09-27","objectID":"/deploy-custom-content-in-microsoft-sentinel-using-repositories/:2:0","tags":null,"title":"Deploy Custom Content In Microsoft Sentinel Using Repositories","uri":"/deploy-custom-content-in-microsoft-sentinel-using-repositories/"},{"categories":null,"content":"Example In the example below, we’ll deploy a really simple analytic rule in which detects for failed login activity in an Active Directory network. Since we can only deploy content through Azure Resource Manager (ARM) templates in the form of .json files, it is recommended to first create the rule in a separate workspace and export it. You can do this by selecting the analytic rule and selecting the export button at the top. Once you have the .json file ARM template, adding this rule to your source repository will immediately deploy to all of the connected workspaces. Note that any changes to existing content will overwrite, any content matching the parameters to deploy will deploy to all workspaces connected to the workflow. Pro tip: Making use of a naming convention to label your CICD content can be extremely helpful when managing content. When managing large rule sets with multiple workspaces, it’s recommended making the required updates and changes to rules from the central repository to maintain consistency across the connected workspaces. ","date":"2022-09-27","objectID":"/deploy-custom-content-in-microsoft-sentinel-using-repositories/:3:0","tags":null,"title":"Deploy Custom Content In Microsoft Sentinel Using Repositories","uri":"/deploy-custom-content-in-microsoft-sentinel-using-repositories/"}]